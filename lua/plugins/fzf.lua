return {
    "ibhagwan/fzf-lua",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    config = function()
        local fzf = require "fzf-lua"
        local actions = require "fzf-lua.actions"
        fzf.setup {
            winopts = {
                height = 0.85,
                width = 0.80,
                row = 0.35,
                col = 0.50,
                border = { "╭", "─", "╮", "│", "╯", "─", "╰", "│" },
                backdrop = 60,
                fullscreen = true,
                preview = {
                    default = "bat",
                    border = "border",
                    wrap = "nowrap",
                    hidden = "nohidden",
                    vertical = "down:45%",
                    horizontal = "right:60%",
                    layout = "flex",
                    flip_columns = 120,
                    title = true,
                    title_pos = "center",
                    scrollbar = "float",
                    scrolloff = "-2",
                    scrollchars = { "█", "" },
                    delay = 100,
                    winopts = {
                        number = true,
                        relativenumber = false,
                        cursorline = true,
                        cursorlineopt = "both",
                        cursorcolumn = false,
                        signcolumn = "no",
                        list = false,
                        foldenable = false,
                        foldmethod = "manual",
                    },
                },
            },
            keymap = {
                builtin = {
                    false,
                    ["<M-Esc>"] = "hide",
                    ["<F1>"] = "toggle-help",
                    ["<F2>"] = "toggle-fullscreen",
                    ["<F3>"] = "toggle-preview-wrap",
                    ["<F4>"] = "toggle-preview",
                    ["<F5>"] = "toggle-preview-ccw",
                    ["<F6>"] = "toggle-preview-cw",
                    ["<S-down>"] = "preview-page-down",
                    ["<S-up>"] = "preview-page-up",
                    ["<M-S-down>"] = "preview-down",
                    ["<M-S-up>"] = "preview-up",
                },
                fzf = {
                    false,
                    ["ctrl-z"] = "abort",
                    ["ctrl-d"] = "half-page-down",
                    ["ctrl-u"] = "half-page-up",
                    ["ctrl-a"] = "beginning-of-line",
                    ["ctrl-e"] = "end-of-line",
                    ["alt-a"] = "toggle-all",
                    ["alt-g"] = "last",
                    ["alt-G"] = "first",
                    ["f3"] = "toggle-preview-wrap",
                    ["f4"] = "toggle-preview",
                    ["shift-down"] = "preview-page-down",
                    ["shift-up"] = "preview-page-up",
                },
            },
            actions = {
                files = {
                    false,
                    ["enter"] = actions.file_edit_or_qf,
                    ["ctrl-s"] = actions.file_split,
                    ["ctrl-v"] = actions.file_vsplit,
                    ["ctrl-t"] = actions.file_tabedit,
                    ["alt-q"] = actions.file_sel_to_qf,
                    ["alt-Q"] = actions.file_sel_to_ll,
                },
            },
            fzf_opts = {
                ["--ansi"] = true,
                ["--info"] = "inline-right",
                ["--height"] = "100%",
                ["--layout"] = "reverse",
                ["--border"] = "none",
                ["--highlight-line"] = true,
            },
            fzf_tmux_opts = { ["-p"] = "80%,80%", ["--margin"] = "0,0" },
            previewers = {
                cat = {
                    cmd = "cat",
                    args = "-n",
                },
                bat = {
                    cmd = "bat",
                    args = "--color=always --style=numbers,changes",
                },
                head = {
                    cmd = "head",
                    args = nil,
                },
                git_diff = {
                    cmd_deleted = "git diff --color HEAD --",
                    cmd_modified = "git diff --color HEAD",
                    cmd_untracked = "git diff --color --no-index /dev/null",
                },
                man = {
                    cmd = "man -c %s | col -bx",
                },
                builtin = {
                    syntax = true,
                    syntax_limit_l = 0,
                    syntax_limit_b = 1024 * 1024,
                    limit_b = 1024 * 1024 * 10,
                    treesitter = { enabled = true, disabled = {} },
                    toggle_behavior = "default",
                    extensions = {
                        ["png"] = { "viu", "-b" },
                        ["svg"] = { "chafa", "{file}" },
                        ["jpg"] = { "ueberzug" },
                    },
                    ueberzug_scaler = "cover",
                },
                codeaction = {
                    diff_opts = { ctxlen = 3 },
                },
                codeaction_native = {
                    diff_opts = { ctxlen = 3 },
                },
            },
            files = {
                prompt = "Files❯ ",
                multiprocess = true,
                git_icons = not vim.g.is_perf,
                file_icons = true,
                color_icons = true,
                find_opts = [[-type f -not -path '*/\.git/*' -printf '%P\n']],
                rg_opts = [[--color=never --files --hidden --follow -g "!.git"]],
                fd_opts = [[--color=never --type f --hidden --follow --exclude .git]],
                cwd_prompt = true,
                cwd_prompt_shorten_len = 32,
                cwd_prompt_shorten_val = 1,
                toggle_ignore_flag = "--no-ignore",
                toggle_hidden_flag = "--hidden",
                actions = {
                    ["ctrl-g"] = { actions.toggle_ignore },
                },
            },
            git = {
                files = {
                    prompt = "GitFiles❯ ",
                    cmd = "git ls-files --exclude-standard",
                    multiprocess = true,
                    git_icons = not vim.g.is_perf,
                    file_icons = true,
                    color_icons = true,
                },
                status = {
                    prompt = "GitStatus❯ ",
                    cmd = "git -c color.status=false --no-optional-locks status --porcelain=v1 -u",
                    multiprocess = true,
                    file_icons = true,
                    git_icons = not vim.g.is_perf,
                    color_icons = true,
                    previewer = "git_diff",
                    actions = {
                        ["right"] = { fn = actions.git_unstage, reload = true },
                        ["left"] = { fn = actions.git_stage, reload = true },
                        ["ctrl-x"] = { fn = actions.git_reset, reload = true },
                    },
                },
                commits = {
                    prompt = "Commits❯ ",
                    cmd = [[git log --color --pretty=format:"%C(yellow)%h%Creset ]]
                        .. [[%Cgreen(%><(12)%cr%><|(12))%Creset %s %C(blue)<%an>%Creset"]],
                    preview = "git show --color {1}",
                    actions = {
                        ["enter"] = actions.git_checkout,
                        ["ctrl-y"] = { fn = actions.git_yank_commit, exec_silent = true },
                    },
                },
                bcommits = {
                    prompt = "BCommits❯ ",
                    cmd = [[git log --color --pretty=format:"%C(yellow)%h%Creset ]]
                        .. [[%Cgreen(%><(12)%cr%><|(12))%Creset %s %C(blue)<%an>%Creset" {file}]],
                    preview = "git show --color {1} -- {file}",
                    actions = {
                        ["enter"] = actions.git_buf_edit,
                        ["ctrl-s"] = actions.git_buf_split,
                        ["ctrl-v"] = actions.git_buf_vsplit,
                        ["ctrl-t"] = actions.git_buf_tabedit,
                        ["ctrl-y"] = { fn = actions.git_yank_commit, exec_silent = true },
                    },
                },
                branches = {
                    prompt = "Branches❯ ",
                    cmd = "git branch --all --color",
                    preview = "git log --graph --pretty=oneline --abbrev-commit --color {1}",
                    actions = {
                        ["enter"] = actions.git_switch,
                        ["ctrl-x"] = { fn = actions.git_branch_del, reload = true },
                        ["ctrl-a"] = { fn = actions.git_branch_add, field_index = "{q}", reload = true },
                    },
                    cmd_add = { "git", "branch" },
                    cmd_del = { "git", "branch", "--delete" },
                },
                tags = {
                    prompt = "Tags> ",
                    cmd = [[git for-each-ref --color --sort="-taggerdate" --format ]]
                        .. [["%(color:yellow)%(refname:short)%(color:reset) ]]
                        .. [[%(color:green)(%(taggerdate:relative))%(color:reset)]]
                        .. [[ %(subject) %(color:blue)%(taggername)%(color:reset)" refs/tags]],
                    preview = [[git log --graph --color --pretty=format:"%C(yellow)%h%Creset ]]
                        .. [[%Cgreen(%><(12)%cr%><|(12))%Creset %s %C(blue)<%an>%Creset" {1}]],
                    actions = { ["enter"] = actions.git_checkout },
                },
                stash = {
                    prompt = "Stash> ",
                    cmd = "git --no-pager stash list",
                    preview = "git --no-pager stash show --patch --color {1}",
                    actions = {
                        ["enter"] = actions.git_stash_apply,
                        ["ctrl-x"] = { fn = actions.git_stash_drop, reload = true },
                    },
                },
                icons = {
                    ["M"] = { icon = "M", color = "yellow" },
                    ["D"] = { icon = "D", color = "red" },
                    ["A"] = { icon = "A", color = "green" },
                    ["R"] = { icon = "R", color = "yellow" },
                    ["C"] = { icon = "C", color = "yellow" },
                    ["T"] = { icon = "T", color = "magenta" },
                    ["?"] = { icon = "?", color = "magenta" },
                },
            },
            grep = {
                prompt = "Rg❯ ",
                input_prompt = "Grep For❯ ",
                multiprocess = true,
                git_icons = not vim.g.is_perf,
                file_icons = true,
                color_icons = true,
                grep_opts = "--binary-files=without-match --line-number --recursive --color=auto --perl-regexp -e",
                rg_opts = "--column --line-number --no-heading --color=always --smart-case --max-columns=4096 -e",
                rg_glob = false,
                glob_flag = "--iglob",
                glob_separator = "%s%-%-",
                actions = {
                    ["ctrl-g"] = { actions.grep_lgrep },
                },
                no_header = false,
                no_header_i = false,
            },
            args = {
                prompt = "Args❯ ",
                files_only = true,
                actions = { ["ctrl-x"] = { fn = actions.arg_del, reload = true } },
            },
            oldfiles = {
                prompt = "History❯ ",
                cwd_only = false,
                stat_file = true,
                include_current_session = false,
            },
            buffers = {
                prompt = "Buffers❯ ",
                file_icons = true,
                color_icons = true,
                sort_lastused = true,
                show_unloaded = true,
                cwd_only = false,
                cwd = nil,
                actions = {
                    ["ctrl-x"] = { fn = actions.buf_del, reload = true },
                },
            },
            tabs = {
                prompt = "Tabs❯ ",
                tab_title = "Tab",
                tab_marker = "<<",
                file_icons = true,
                color_icons = true,
                actions = {
                    ["enter"] = actions.buf_switch,
                    ["ctrl-x"] = { fn = actions.buf_del, reload = true },
                },
                fzf_opts = {
                    -- hide tabnr
                    ["--delimiter"] = "[\\):]",
                    ["--with-nth"] = "2..",
                },
            },
            lines = {
                previewer = "builtin",
                prompt = "Lines❯ ",
                show_unloaded = true,
                show_unlisted = false,
                no_term_buffers = true,
                fzf_opts = {
                    ["--delimiter"] = "[\\]:]",
                    ["--nth"] = "2..",
                    ["--tiebreak"] = "index",
                    ["--tabstop"] = "1",
                },
                actions = {
                    ["enter"] = actions.buf_edit_or_qf,
                    ["alt-q"] = actions.buf_sel_to_qf,
                    ["alt-l"] = actions.buf_sel_to_ll,
                },
            },
            blines = {
                previewer = "builtin",
                prompt = "BLines❯ ",
                show_unlisted = true,
                no_term_buffers = false,
                fzf_opts = {
                    ["--delimiter"] = "[:]",
                    ["--with-nth"] = "2..",
                    ["--tiebreak"] = "index",
                    ["--tabstop"] = "1",
                },
                actions = {
                    ["enter"] = actions.buf_edit_or_qf,
                    ["alt-q"] = actions.buf_sel_to_qf,
                    ["alt-l"] = actions.buf_sel_to_ll,
                },
            },
            tags = {
                prompt = "Tags❯ ",
                ctags_file = nil,
                multiprocess = true,
                file_icons = true,
                git_icons = not vim.g.is_perf,
                color_icons = true,
                rg_opts = "--no-heading --color=always --smart-case",
                grep_opts = "--color=auto --perl-regexp",
                fzf_opts = { ["--tiebreak"] = "begin" },
                actions = {
                    ["ctrl-g"] = { actions.grep_lgrep },
                },
                no_header = false,
                no_header_i = false,
            },
            btags = {
                prompt = "BTags❯ ",
                ctags_file = nil,
                ctags_autogen = true,
                multiprocess = true,
                file_icons = false,
                git_icons = false,
                rg_opts = "--color=never --no-heading",
                grep_opts = "--color=never --perl-regexp",
                fzf_opts = { ["--tiebreak"] = "begin" },
            },
            colorschemes = {
                prompt = "Colorschemes❯ ",
                live_preview = true,
                actions = { ["enter"] = actions.colorscheme },
                winopts = { height = 0.55, width = 0.30 },
            },
            awesome_colorschemes = {
                prompt = "Colorschemes❯ ",
                live_preview = true,
                max_threads = 5,
                winopts = { row = 0, col = 0.99, width = 0.50 },
                fzf_opts = {
                    ["--multi"] = true,
                    ["--delimiter"] = "[:]",
                    ["--with-nth"] = "3..",
                    ["--tiebreak"] = "index",
                },
                actions = {
                    ["enter"] = actions.colorscheme,
                    ["ctrl-g"] = { fn = actions.toggle_bg, exec_silent = true },
                    ["ctrl-r"] = { fn = actions.cs_update, reload = true },
                    ["ctrl-x"] = { fn = actions.cs_delete, reload = true },
                },
            },
            keymaps = {
                prompt = "Keymaps> ",
                winopts = { preview = { layout = "vertical" } },
                fzf_opts = { ["--tiebreak"] = "index" },
                ignore_patterns = { "^<SNR>", "^<Plug>" },
                show_details = true,
                actions = {
                    ["enter"] = actions.keymap_apply,
                    ["ctrl-s"] = actions.keymap_split,
                    ["ctrl-v"] = actions.keymap_vsplit,
                    ["ctrl-t"] = actions.keymap_tabedit,
                },
            },
            quickfix = {
                file_icons = true,
                git_icons = not vim.g.is_perf,
                only_valid = false,
            },
            quickfix_stack = {
                prompt = "Quickfix Stack> ",
                marker = ">",
            },
            lsp = {
                prompt_postfix = "❯ ",
                cwd_only = false,
                async_or_timeout = 5000,
                file_icons = true,
                git_icons = false,
                includeDeclaration = true,
                symbols = {
                    async_or_timeout = true,
                    symbol_style = 1,
                    symbol_icons = {
                        File = "󰈙",
                        Module = "",
                        Namespace = "󰦮",
                        Package = "",
                        Class = "󰆧",
                        Method = "󰊕",
                        Property = "",
                        Field = "",
                        Constructor = "",
                        Enum = "",
                        Interface = "",
                        Function = "󰊕",
                        Variable = "󰀫",
                        Constant = "󰏿",
                        String = "",
                        Number = "󰎠",
                        Boolean = "󰨙",
                        Array = "󱡠",
                        Object = "",
                        Key = "󰌋",
                        Null = "󰟢",
                        EnumMember = "",
                        Struct = "󰆼",
                        Event = "",
                        Operator = "󰆕",
                        TypeParameter = "󰗴",
                    },
                    symbol_hl = function(s)
                        return "@" .. s:lower()
                    end,
                    symbol_fmt = function(s, opts)
                        return "[" .. s .. "]"
                    end,
                    child_prefix = true,
                    fzf_opts = { ["--tiebreak"] = "begin" },
                },
                code_actions = {
                    prompt = "Code Actions> ",
                    async_or_timeout = 5000,
                    previewer = "codeaction",
                },
                finder = {
                    prompt = "LSP Finder> ",
                    file_icons = true,
                    color_icons = true,
                    git_icons = false,
                    async = true,
                    silent = true,
                    separator = "| ",
                    includeDeclaration = true,
                    providers = {
                        { "references",      prefix = require("fzf-lua").utils.ansi_codes.blue "ref " },
                        { "definitions",     prefix = require("fzf-lua").utils.ansi_codes.green "def " },
                        { "declarations",    prefix = require("fzf-lua").utils.ansi_codes.magenta "decl" },
                        { "typedefs",        prefix = require("fzf-lua").utils.ansi_codes.red "tdef" },
                        { "implementations", prefix = require("fzf-lua").utils.ansi_codes.green "impl" },
                        { "incoming_calls",  prefix = require("fzf-lua").utils.ansi_codes.cyan "in  " },
                        { "outgoing_calls",  prefix = require("fzf-lua").utils.ansi_codes.yellow "out " },
                    },
                },
            },
            diagnostics = {
                prompt = "Diagnostics❯ ",
                cwd_only = false,
                file_icons = true,
                git_icons = false,
                diag_icons = true,
                diag_source = true,
                icon_padding = "",
                multiline = true,
            },
            marks = {
                marks = "",
            },
            complete_path = {
                cmd = nil,
                complete = { ["enter"] = actions.complete },
            },
            complete_file = {
                cmd = nil,
                file_icons = true,
                color_icons = true,
                git_icons = false,
                actions = { ["enter"] = actions.complete },
                winopts = { preview = { hidden = "hidden" } },
            },
            file_icon_padding = "",
        }
        vim.cmd "FzfLua setup_fzfvim_cmds"

        vim.keymap.set("n", "<leader>fw", function()
            fzf.grep { search = "" }
        end, { nowait = true })

        vim.keymap.set("n", "<leader><leader>", function()
            fzf.files()
        end, { nowait = true })
    end,
}
